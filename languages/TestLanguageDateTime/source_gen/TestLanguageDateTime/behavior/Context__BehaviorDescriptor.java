package TestLanguageDateTime.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.openapi.editor.update.UpdaterListener;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public final class Context__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x77c1272932b445a1L, 0xaaa405d08cec0b0eL, 0x6b28562f905fc07L, "TestLanguageDateTime.structure.Context");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Void> SetEditorContext_id7CcpcRWcvwj = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("SetEditorContext").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7CcpcRWcvwj").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(EditorComponent.class, ""));
  /*package*/ static final SMethod<UpdaterListener> createListener_id7CcpcRWcAKM = new SMethodBuilder<UpdaterListener>(new SJavaCompoundTypeImpl(UpdaterListener.class)).name("createListener").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("7CcpcRWcAKM").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(EditorComponent.class, ""));
  /*package*/ static final SMethod<Void> elementchanged_id6d4fgnE6Yj4 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("elementchanged").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("6d4fgnE6Yj4").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(EditorComponent.class, ""));
  /*package*/ static final SMethod<Void> removelistener_id6d4fgnE6YTb = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("removelistener").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("6d4fgnE6YTb").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(EditorComponent.class, ""));
  /*package*/ static final SMethod<Void> grabtext_id6d4fgnE6YZh = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("grabtext").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("6d4fgnE6YZh").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(EditorComponent.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(SetEditorContext_id7CcpcRWcvwj, createListener_id7CcpcRWcAKM, elementchanged_id6d4fgnE6Yj4, removelistener_id6d4fgnE6YTb, grabtext_id6d4fgnE6YZh);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void SetEditorContext_id7CcpcRWcvwj(@NotNull SNode __thisNode__, EditorComponent editorcomponent) {
    String key = "editor_context_initialized";
    Object o = __thisNode__.getUserObject(key);
    if (o instanceof Boolean && ((Boolean) o).booleanValue()) {
      return;
    }
    if (LOG.isInfoEnabled()) {
      LOG.info("Binding editor for: " + __thisNode__.hashCode());
    }
    __thisNode__.putUserObject(key, true);
    UpdaterListener listener = Context__BehaviorDescriptor.createListener_id7CcpcRWcAKM.invoke(__thisNode__, editorcomponent);
    __thisNode__.putUserObject("update listener", listener);
    editorcomponent.getUpdater().addListener(listener);
  }
  /*package*/ static UpdaterListener createListener_id7CcpcRWcAKM(@NotNull SNode __thisNode__, final EditorComponent editorComponent) {
    final SNode _this = __thisNode__;
    return new UpdaterListener() {
      public void cellSynchronizedWithModel(EditorCell p0) {
        Context__BehaviorDescriptor.elementchanged_id6d4fgnE6Yj4.invoke(_this, editorComponent);
      }
      public void editorUpdated(jetbrains.mps.openapi.editor.EditorComponent p0) {
        Context__BehaviorDescriptor.elementchanged_id6d4fgnE6Yj4.invoke(_this, editorComponent);
      }

    };
  }
  /*package*/ static void elementchanged_id6d4fgnE6Yj4(@NotNull SNode __thisNode__, EditorComponent editorComponent) {
    if ((SNodeOperations.getParent(__thisNode__) == null)) {
      Context__BehaviorDescriptor.removelistener_id6d4fgnE6YTb.invoke(__thisNode__, editorComponent);
    } else {
      Context__BehaviorDescriptor.grabtext_id6d4fgnE6YZh.invoke(__thisNode__, editorComponent);
    }
  }
  /*package*/ static void removelistener_id6d4fgnE6YTb(@NotNull SNode __thisNode__, EditorComponent editorComponent) {
    if (LOG.isInfoEnabled()) {
      LOG.info("Unbinding editor for: " + __thisNode__.hashCode());
    }
    String key = "update listener";
    UpdaterListener listener = ((UpdaterListener) __thisNode__.getUserObject(key));
    if (__thisNode__ != null) {
      __thisNode__.putUserObject(key, null);
      editorComponent.getUpdater().removeListener(listener);
    }
  }
  /*package*/ static void grabtext_id6d4fgnE6YZh(@NotNull SNode __thisNode__, EditorComponent editorComponent) {
    EditorCell cell = editorComponent.findNodeCell(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x77c1272932b445a1L, 0xaaa405d08cec0b0eL, 0x6b28562f905fc07L, 0x6b28562f905fc08L, "entities"))).first());
    String text = cell.renderText().getText();
    String oldtext = SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x77c1272932b445a1L, 0xaaa405d08cec0b0eL, 0x6b28562f905fc07L, 0x7b09cf0db9d1839aL, "text"));
    if (eq_5sxdbs_a0d0r(oldtext, text)) {
      return;
    }
    try {
      SPropertyOperations.set(__thisNode__, MetaAdapterFactory.getProperty(0x77c1272932b445a1L, 0xaaa405d08cec0b0eL, 0x6b28562f905fc07L, 0x7b09cf0db9d1839aL, "text"), text);
    } catch (Throwable t) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(String.format("Exception while setting text property from %s to %s"), t);
      }
    }

  }

  /*package*/ Context__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        SetEditorContext_id7CcpcRWcvwj(node, (EditorComponent) parameters[0]);
        return null;
      case 1:
        return (T) ((UpdaterListener) createListener_id7CcpcRWcAKM(node, (EditorComponent) parameters[0]));
      case 2:
        elementchanged_id6d4fgnE6Yj4(node, (EditorComponent) parameters[0]);
        return null;
      case 3:
        removelistener_id6d4fgnE6YTb(node, (EditorComponent) parameters[0]);
        return null;
      case 4:
        grabtext_id6d4fgnE6YZh(node, (EditorComponent) parameters[0]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  protected static Logger LOG = LogManager.getLogger(Context__BehaviorDescriptor.class);
  private static boolean eq_5sxdbs_a0d0r(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
