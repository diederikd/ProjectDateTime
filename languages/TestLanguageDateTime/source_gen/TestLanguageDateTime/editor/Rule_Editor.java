package TestLanguageDateTime.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import TestLanguageDateTime.plugin.EvalHelper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.nodeEditor.cells.EditorCell_Image;

public class Rule_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_z0m96w_a(editorContext, node);
  }
  private EditorCell createCollection_z0m96w_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_z0m96w_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createCollection_z0m96w_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_z0m96w_b0(editorContext, node));
    editorCell.addEditorCell(this.createAlternation_z0m96w_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_z0m96w_d0(editorContext, node));
    return editorCell;
  }
  private EditorCell createCollection_z0m96w_a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_z0m96w_a0");
    editorCell.addEditorCell(this.createRefNode_z0m96w_a0a(editorContext, node));
    return editorCell;
  }
  private EditorCell createRefNode_z0m96w_a0a(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new Rule_Editor.expressionSingleRoleHandler_z0m96w_a0a(node, MetaAdapterFactory.getContainmentLink(0x77c1272932b445a1L, 0xaaa405d08cec0b0eL, 0x7b179a3374fa6144L, 0x7b179a3374fa6145L, "expression"), editorContext);
    return provider.createCell();
  }
  private class expressionSingleRoleHandler_z0m96w_a0a extends SingleRoleCellProvider {
    public expressionSingleRoleHandler_z0m96w_a0a(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("expression");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_expression");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no expression>";
    }
  }
  private EditorCell createConstant_z0m96w_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "  ");
    editorCell.setCellId("Constant_z0m96w_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createAlternation_z0m96w_c0(EditorContext editorContext, SNode node) {
    boolean alternationCondition = true;
    alternationCondition = Rule_Editor.renderingCondition_z0m96w_a2a(node, editorContext);
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = this.createImage_z0m96w_a2a(editorContext, node);
    } else {
      editorCell = this.createImage_z0m96w_a2a_0(editorContext, node);
    }
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private static boolean renderingCondition_z0m96w_a2a(SNode node, EditorContext editorContext) {
    try {
      return (boolean) EvalHelper.evaluate(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x77c1272932b445a1L, 0xaaa405d08cec0b0eL, 0x7b179a3374fa6144L, 0x7b179a3374fa6145L, "expression")));
    } catch (Throwable t) {
      return false;
    }
  }
  private EditorCell createImage_z0m96w_a2a(final EditorContext editorContext, final SNode node) {
    SModule imageModule;
    String imagePath;
    imageModule = SNodeOperations.getConcept(node).getLanguage().getSourceModule();
    imagePath = "/Users/diederikdulfer/MPSProjects/ProjectDateTime/languages/LanguageDateTime/icons/Green.png";
    EditorCell_Image editorCell = EditorCell_Image.createImageCell(editorContext, node, imageModule, imagePath);
    editorCell.setCellId("Image_z0m96w_a2a");
    editorCell.setDescent(4);
    return editorCell;
  }
  private EditorCell createImage_z0m96w_a2a_0(final EditorContext editorContext, final SNode node) {
    SModule imageModule;
    String imagePath;
    imageModule = SNodeOperations.getConcept(node).getLanguage().getSourceModule();
    imagePath = "/Users/diederikdulfer/MPSProjects/ProjectDateTime/languages/LanguageDateTime/icons/Red.png";
    EditorCell_Image editorCell = EditorCell_Image.createImageCell(editorContext, node, imageModule, imagePath);
    editorCell.setCellId("Image_z0m96w_a2a_0");
    editorCell.setDescent(4);
    return editorCell;
  }
  private EditorCell createConstant_z0m96w_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_z0m96w_d0");
    editorCell.setDefaultText("");
    return editorCell;
  }
}
